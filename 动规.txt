动规
	选择：在某个状态下可以做什么
	状态：数组位置、约束条件、做了选择导致的结果
	状态转移方程：
				要在当前状态做出选择，需要基于之前哪个状态，做出的选择会得到哪些收益（一般从前往后遍历）
				当前可以做出的选择，会获得的收益，将当前状态推向哪一个状态（一般从后往前遍历）

动态规划的核心设计思想是数学归纳法
最优子结构：可以通过子问题的最优结果推出更大规模问题的最优结果（子问题之间必须互相独立）
dp数组的遍历：
  1、遍历过程中，所有状态必须是已经计算出来的
  2、遍历终点是存储结果的那个位置

  重叠子问题：
	定性分析：两条不同的路径到达了同一个问题，这就是重叠子问题
	定量分析：找一个例子，画出递归树

问题1：零钱问题

问题2：编辑距离
（解决两个字符串的动态规划问题，一般都是用两个指针i,j分别指向两个字符串的最后，最后一步步往前走，缩小问题规模）
（DP table 是自底向上求解，递归解法是自顶向下求解）

问题3：高楼扔鸡蛋
	选择：选择一层楼，扔鸡蛋
	状态：剩余鸡蛋数，楼层数

问题4：最长子序列
	单字符串（最长回文子串）：左右指针
	双字符串（编辑距离）：双指针

问题5：博弈问题
	在二位dp的基础上使用元组分别存储两个人的博弈结果

问题6：贪心算法
	区间调度

问题7：kmp字符串匹配
	next[j]: 表示模式串pat 0~j-1最长前后缀字符个数
	匹配失败时，将j指向next[j],因为next[j]表示j位置处的最长前后缀，所以pat[next[j]]之前的一定匹配
	因为是找最长前后缀，因此也是将pat去头与pat去尾进行配对。并且在匹配失败时，j指针回到next[j]就可以
	匹配成功时，先将i和j指针前进一位,因为j是从0开始的，所以更新next[i]=j

问题8：股票问题
	选择：
		1、买股票
		2、卖股票
		3、不交易
	状态：
		1、当前所处日
		2、当前交易次数
		3、当前是否持有股票
	状态转移：
		1、今天未持有股票=（昨天未持有，今天未交易，交易次数不变）（昨天持有，今天卖出，交易次数不变）
		2、今天持有股票=（昨天持有，今天未交易，交易次数不变）（昨天未持有，今天购买了，交易次数加1）

问题9：打家劫舍
	选择：
		1、抢
		2、不枪
	状态：
		1、所在房间i，dp[i]表示从第i间房子开始能抢到的最多钱
	状态转移：
		rob[i] = max(rob[i+1], rob[i+2] + nums[i])
		rob[i+2] = rob[i+1]（抢i）
		rob[i+1] = rob[i]（不抢i）

问题10：四键键盘
	选择：
		1、A
		2、Ctrl-A
		3、Ctrl-C
		4、Ctrl-V
	状态：
		当前按键次数i
		j：连续Ctrl-V起始位置，从第二次按开始，到第 i 次按完，j = i - 1
		dp[i]：第i次按完后，屏幕上的字符数量
	状态转移方程：
		从第j-2次按完，开始Ctrl-A Ctrl-C Ctrl-V。粘贴次数i - j，加上之前屏幕上就有的，一共dp[j - 2] * (i - j + 1)个字符
		dp[i] = max(dp[i-1] + 1, dp[j - 2] * (i - j + 1))

问题11：正则表达式
	选择：
		1、i后移一位（text[i]和pattern[j]匹配，且pattern[j+1]为*）
		2、j后移两位（text[i]和pattern[j]不匹配，且pattern[j+1]为*）
		3、i和j同时后移一位（（text[i]和pattern[j]匹配，且pattern[j+1]不为*））
		4、返回不匹配（text[i]和pattern[j]不匹配，且pattern[j+1]不为*）
	状态：
		1、text串当前位置指针i
		2、pattern串当前位置指针j
		3、j+1位置字符是否为*
	状态转移方程：
		1、当前模式串字符后一个字符不是*，且当前字符不匹配，则返回false
		2、当前模式串字符后一个字符不是*，且当前字符匹配，则返回dp(i+1, j+1)
		3、当前模式串字符后一个字符是*，且当前字符匹配，则dp(i+1, j)
		4、 当前模式串字符后一个字符是*，且当前字符不匹配，则dp(i, j+2)

问题12：最长公共子序列
	选择：
		1、i后移一位
		2、j后移一位
	状态：
		1、s1(0~i)与s2(0~j)最长公共子序列长度
	状态转移方程：
		1、if s[i-1] == s[j-1]:
				dp[i][j] = dp[i-1][j-1] + 1
			 else
			 	dp[i][j] = max(dp[i-1, j], dp[i][j-1])